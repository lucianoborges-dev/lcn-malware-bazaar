using LcN.MalwareBazaar.ApiClient.Models;
using LcN.MalwareBazaar.Client.Constants;

namespace LcN.MalwareBazaar.ApiClient.Services;

public sealed class BazaarHttpClient : IDisposable
{
    private readonly HttpClient _client;

    public BazaarHttpClient()
    {
        _client = new HttpClient
        {
            BaseAddress = new Uri(ApiConstants.BazaarURL)
        };
    }

    public BazaarHttpClient(HttpClient client)
    {
        _client = client;
    }


    public BazaarHttpClient(string apiAddress)
    {
        _client = new HttpClient
        {
            BaseAddress = new Uri(apiAddress)
        };
    }


    private async Task<HttpContent> GetContent(Query query, CancellationToken cancellationToken = default)
    {
        var request = new HttpRequestMessage
        {
            Content = query
        };

        var response = await _client.SendAsync(request, cancellationToken);

        response.EnsureSuccessStatusCode();

        return response.Content;
    }

    public async Task<string> GetContentString(Query query, CancellationToken cancellationToken = default)
    {
        var content = await GetContent(query, cancellationToken);
        return await content!.ReadAsStringAsync(cancellationToken);
    }

    public async Task<Stream> GetContentStream(Query query, CancellationToken cancellationToken = default)
    {
        var content = await GetContent(query, cancellationToken);
        return await content!.ReadAsStreamAsync(cancellationToken);
    }

    public void Dispose()
    {
        _client.Dispose();
    }
}
