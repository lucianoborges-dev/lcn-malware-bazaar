using LcN.MalwareBazaar.ApiClient.Models;
using LcN.MalwareBazaar.Client.Constants;
using LcN.MalwareBazaar.Client.Interfaces;

namespace LcN.MalwareBazaar.ApiClient.Services;

public sealed class BazaarApiClient : IBazaarApiClient
{
    private readonly BazaarHttpClient _bazaarHttpClient;

    public BazaarApiClient(BazaarHttpClient bazaarHttpClient)
    {
        _bazaarHttpClient = bazaarHttpClient;
    }

    private async Task<string> GetContentString(Query query, CancellationToken cancellationToken = default)
    {
        return await _bazaarHttpClient.GetContentString(query, cancellationToken);
    }

    private async Task<Stream> GetContentStream(Query query, CancellationToken cancellationToken = default)
    {
        return await _bazaarHttpClient.GetContentStream(query, cancellationToken);
    }

    public async Task<string> GetClamAVInfo(string clamav, int limit = ApiConstants.DefaultLimit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_clamavinfo" },
                { "clamav", clamav },
                { "limit", limit.ToString() }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetCSCB(CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_cscb" }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<Stream> GetFile(string sha256Hash, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_file" },
                { "sha256_hash", sha256Hash }
            };

        return await GetContentStream(query, cancellationToken);
    }

    public async Task<string> GetFileType(string fileType, CancellationToken cancellationToken = default)
    {
        return await GetFileType(fileType, ApiConstants.DefaultLimit, cancellationToken);
    }

    public async Task<string> GetFileType(string fileType, int limit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_file_type" },
                { "file_type", fileType },
                { "limit", limit.ToString() }
            };

        return await GetContentString(query, cancellationToken);
    }


    public async Task<string> GetImphash(string imphash, int limit = ApiConstants.DefaultLimit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_imphash" },
                { "imphash", imphash },
                { "limit", limit.ToString() }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetInfo(string hash, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_info" },
                { "hash", hash }
            };

        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetIssuerInfo(string issuerCN, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_issuerinfo" },
                { "issuer_cn", issuerCN }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetRecentByLimit(int limit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_recent" },
                { "selector", limit.ToString() }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetRecentByTime(CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_recent" },
                { "selector", "time" }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetSigInfo(string signature, int limit = ApiConstants.DefaultLimit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_siginfo" },
                { "signature", signature },
                { "limit", limit.ToString() }
            };

        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetSubjectInfo(string subjectCN, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_subjectinfo" },
                { "subject_cn", subjectCN }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetTagInfo(string tag, int limit = ApiConstants.DefaultLimit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_taginfo" },
                { "tag", tag },
                { "limit", limit.ToString() }
            };

        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetTelfHash(string telfhash, int limit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_tlsh" },
                { "telfhash", telfhash },
                { "limit", limit.ToString() }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetTLSH(string tlsh, int limit = ApiConstants.DefaultLimit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_tlsh" },
                { "tlsh", tlsh },
                { "limit", limit.ToString() }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetYaraInfo(string yaraRule, int limit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_yarainfo" },
                { "yara_rule", yaraRule },
                { "limit", limit.ToString() }
            };
        return await GetContentString(query, cancellationToken);
    }

    public async Task<string> GetDHashIcon(string dhashIcon, int limit, CancellationToken cancellationToken = default)
    {
        var query = new Query
            {
                { "query", "get_dhash_icon" },
                { "dhash_icon", dhashIcon },
                { "limit", limit.ToString() }
            };
        return await GetContentString(query, cancellationToken);
    }
}

